version: 2.1

commands:
  generate_files_sum:
    steps:
      - run: 
          name: Generate checksum file
          command: sha256sum $(git ls-files) > files.sum
  restore_bazel_test_cache:
    steps:
      - generate_files_sum
      - restore_cache:
          keys:
            - v1-bazel-test-cache-{{ checksum "files.sum" }}
            - v1-bazel-test-cache-
  restore_bazel_build_cache:
    steps:
      - generate_files_sum
      - restore_cache:
          keys:
            - v1-bazel-build-cache-{{ checksum "files.sum" }}
            - v1-bazel-build-cache-
  restore_bazel_release_cache:
    steps:
      - generate_files_sum
      - restore_cache:
          keys:
            - v1-bazel-release-cache-{{ checksum "files.sum" }}
            - v1-bazel-release-cache-
  save_bazel_test_cache:
    steps:
      - save_cache:
          key: v1-bazel-test-cache-{{ checksum "files.sum" }}
          paths:
            - /tmp/build_output
  save_bazel_build_cache:
    steps:
      - save_cache:
          key: v1-bazel-build-cache-{{ checksum "files.sum" }}
          paths:
            - /tmp/build_output
  save_bazel_release_cache:
    steps:
      - save_cache:
          key: v1-bazel-release-cache-{{ checksum "files.sum" }}
          paths:
            - /tmp/build_output
  configure_bazel:
    steps:
      - run:
          name: Create Bazel config file
          command: |
            cat > ~/.bazelrc \<< EOF
            startup --output_base /tmp/build_output
            build --test_output errors
            # See https://docs.bazel.build/versions/0.23.0/command-line-reference.html
            build --local_ram_resources=4096 # Container runners have 4G RAM
            build --local_cpu_resources=2    # Container runners have 2 vCPU
            EOF

jobs:
  build:
    docker:
      - image: l.gcr.io/google/bazel:3.5.0
    steps:
      - checkout
      - configure_bazel
      - restore_bazel_build_cache
      - run: bazel build //...
      - save_bazel_build_cache
  test:
    # Use machine runner for docker socket access
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          environment:
            BAZELISK_VERSION: "1.4.0"
          name: Install Bazelisk as bazel
          command: |
            wget -O ~/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v${BAZELISK_VERSION}/bazelisk-linux-amd64 &&
            chmod +x ~/bin/bazel
      - configure_bazel
      - restore_bazel_test_cache
      # Configure pyenv on the machine
      - run: echo "3.7.0" > /opt/circleci/.pyenv/version
      - run: bazel test //...
      - save_bazel_test_cache
  gazelle:
    docker:
      - image: l.gcr.io/google/bazel:3.5.0
    steps:
      - checkout
      - configure_bazel
      - restore_bazel_build_cache
      - run: bazel run :gazelle
      - run: bazel run :gazelle -- update-repos -from_file=go.mod -to_macro=repositories.bzl%go_repositories
      - run: git diff --exit-code
  buildifier:
    docker:
      - image: l.gcr.io/google/bazel:3.5.0
    steps:
      - checkout
      - configure_bazel
      - restore_bazel_build_cache
      - run: bazel run :buildifier
      - run: git diff --exit-code
  format:
    docker:
      - image: golang:1.15
    steps:
      - checkout
      - run:
          name: Install gofumports outside local module
          command: |
            cd $(mktemp -d) &&
            go mod init tmp &&
            go get mvdan.cc/gofumpt/gofumports@latest
      - run:
          name: Run gofumports on all non-generated files
          command: grep -L -r "^\/\/ Code generated .* DO NOT EDIT\.$$" --exclude-dir=.git --exclude-dir=bazel-* --include="*.go" . | xargs -n 1 gofumports -w -local github.com/johanbrandhorst/bazel-mono
      - run:
          name: Check for any changes
          command: git diff --exit-code
  mod:
    docker:
      - image: golang:1.15
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-cache
      - run: go mod tidy
      - run:
          name: Check for any changes
          command: git diff --exit-code
      - save_cache:
          key: go-mod-cache
          paths:
            - /home/circleci/.cache/go-build
  lint:
    docker:
      - image: golang:1.15
    steps:
      - checkout
      - run:
          environment:
            BAZELISK_VERSION: "1.4.0"
          name: Install Bazelisk as bazel
          command: |
            wget -O /usr/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v${BAZELISK_VERSION}/bazelisk-linux-amd64 &&
            chmod +x /usr/bin/bazel
      - configure_bazel
      - restore_bazel_build_cache
      - restore_cache:
          keys:
            - v1-staticcheck-cache-{{ checksum "go.sum" }}
            - v1-staticcheck-cache-
      - run:
          name: Install staticcheck outside local module
          command: |
            cd $(mktemp -d) &&
            go mod init tmp &&
            go get honnef.co/go/tools/cmd/staticcheck
      - run:
          name: Install python3 and patch for bazel
          command: apt-get update && apt-get install -y python3 patch
      - run:
          name: Run bazel build to create files for symlinking
          command: bazel build //...
      - run:
          name: Run symlinks script to create symlinks
          command: ./symlinks.sh
      - run: staticcheck ./...
      - save_cache:
          key: v1-staticcheck-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/.cache/go-build
            - /home/circleci/.cache/staticcheck
  proto_lint:
    docker:
      - image: bufbuild/buf:0.37.0
    steps:
      - checkout
      - run:
          name: Check for breaking changes
          command: buf check lint
  proto_breaking:
    docker:
      - image: bufbuild/buf:0.37.0
    steps:
      - checkout
      - run:
          name: Sync master with remote master unless current branch
          command: if [[ $(git rev-parse --abbrev-ref HEAD) != "master" ]]; then git branch -f master origin/master; fi
      - run:
          name: Check for breaking changes
          command: buf check breaking --against-input '.git#branch=master'
  release:
    docker:
      - image: l.gcr.io/google/bazel:3.5.0
    steps:
      - checkout
      - configure_bazel
      - restore_bazel_release_cache
      - run: echo "${GITHUB_TOKEN}" | docker login https://docker.pkg.github.com -u johanbrandhorst --password-stdin
      - run:
          name: Publish all containers with bazel
          command: |
            bazel query --keep_going --noshow_progress "kind(container_push, //...)" | \
            xargs -n 1 bazel run
      - save_bazel_release_cache
  update-repositoriesbzl:
    docker:
      - image: l.gcr.io/google/bazel:3.5.0
    steps:
      - checkout
      - configure_bazel
      - restore_bazel_build_cache
      - run:
          name: Update repositories.bzl
          command: |
            bazel run //:gazelle -- update-repos -from_file=go.mod -to_macro=repositories.bzl%go_repositories
      - run:
          name: Git amend and push changes
          command: |
            git add .
            if output=$(git status --porcelain) && [ ! -z "$output" ]; then
              git config user.name "Renovate Bot"
              git config user.email "bot@renovateapp.com"
              git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/johanbrandhorst/bazel-mono.git
              git commit --amend --no-edit
              git push --force-with-lease origin ${CIRCLE_BRANCH}
            fi

workflows:
  version: 2
  build:
    jobs:
      - release
      - build
      - test
      - gazelle
      - buildifier
      - format
      - mod
      - lint
      - proto_lint
      - proto_breaking:
          filters:
            branches:
              ignore: master
      - update-repositoriesbzl:
          filters:
            branches:
              only: /renovate\/.+/
            tags:
              ignore: /.*/
